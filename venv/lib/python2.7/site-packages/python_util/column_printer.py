from __future__ import print_function

import re


ANSI_ESCAPE = re.compile(r'\x1b[^m]*m')


class ColumnPrinter(object):
    def __init__(self, sep=4, prefix='', incremental=False):
        self.prefix = prefix
        self.sep = sep
        self.incremental = incremental

        self.rows = []
        self.widths = []

    @staticmethod
    def printable(row):
        return ANSI_ESCAPE.sub('', row)

    def append(self, row, func=lambda x: x):
        self.rows.append([str(func(r)) for r in row])

        if self.incremental:
            self.output()
            self.rows = []

    def output(self):
        length = len(self.rows[0])

        for i in range(length):
            width = self.sep + max(
                len(self.printable(row[i]))
                for row in self.rows
            )

            if len(self.widths) <= i:
                self.widths.append(width)
            elif width > self.widths[i]:
                self.widths[i] = width

        for row in self.rows:
            printable = [self.prefix]

            # TODO: align decimals, etc
            for i in range(length):
                printable.append(row[i])
                printable.append(
                    ' ' * (self.widths[i] - len(self.printable(row[i])))
                )
            print(''.join(printable))

    def reset(self):
        self.rows = []
        self.widths = []
