import docopt


class ValidationException(Exception):
    pass


def transform(args, transforms):
    for key, function in transforms.items():
        try:
            arg = args[key]
        except KeyError:
            raise ValidationException(
                '{} is not a valid argument for transformation.'.format(key))

        if not arg:
            continue

        try:
            args[key] = function(arg)
        except Exception as e:
            raise ValidationException('Could not transform parameter {}. '
                                      'Error was {}'.format(key, str(e)))


def validate(args, validations):
    for key, function in validations.items():
        try:
            arg = args[key]
        except KeyError:
            raise ValidationException(
                '{} is not a valid argument for validation.'.format(key))

        if not arg:
            continue

        try:
            success = function(arg)
            if not success:
                raise ValidationException('did not obey requirements')
        except Exception as e:
            raise ValidationException('Could not validate parameter {}. '
                                      'Error was: {}'.format(key, str(e)))


# pylint: disable=W0622
def docopt_wrapper(doc, argv=None, help=True, version=None,
                   options_first=False, transforms=None, validations=None):
    args = docopt.docopt(doc, argv, help, version, options_first)

    if validations:
        validate(args, validations)

    if transforms:
        transform(args, transforms)

    return args
