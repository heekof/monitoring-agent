import time
import unittest
import warnings

from python_util import deprecated, timeout


class TestDeprecated(unittest.TestCase):
    @staticmethod
    @deprecated()
    def fun1():
        return True

    @staticmethod
    @deprecated("Use fun1 instead.")
    def fun2():
        return True

    def test_warns(self):
        with warnings.catch_warnings(record=True) as w:
            self.fun1()

            self.assertEqual(len(w), 1)
            self.assertEqual(
                str(w[-1].message),
                'Call to deprecated function fun1.'
            )

            self.fun2()

            self.assertEqual(len(w), 2)
            self.assertEqual(
                str(w[-1].message),
                'Call to deprecated function fun2. Use fun1 instead.'
            )


class TestTimer(unittest.TestCase):
    @staticmethod
    @timeout(1)
    def bad():
        time.sleep(1.1)
        return True

    @staticmethod
    @timeout(1)
    def good():
        time.sleep(0.9)
        return True

    def test_times_out(self):
        with self.assertRaises(Exception) as e:
            self.bad()
            self.assertEqual(str(e), 'Function call timed out')

        self.good()


if __name__ == '__main__':
    unittest.main()
